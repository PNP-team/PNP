import torch
import torch.nn.functional as F
import os
import unittest
import pytest


from HTMLTestRunner import HTMLTestRunner
print(torch.__path__)

x1 = torch.tensor([[1, 2, 3, 2], [5, 6, 7, 8],[1,2,3,4]], dtype=torch.BLS12_377_Fr_G1_Base)

x2 =torch.tensor([[1, 2, 3, 4], [5, 6, 7, 8],[1,2,3,4]], dtype=torch.BLS12_377_Fr_G1_Base)
# x.to("cuda")
print("===========")
y1=F.to_mod(x1)
y2=F.to_mod(x2)

# res=F.sub_mont(y1,y2)
# res=F.add_mont(res,y1)
res=F.sub_mod(y1,y2)
res2=F.add_mod(res,y2)
# a = y.clone()

print("mont",res2)
z=F.to_base(res2)
print("base",z)




import torch
import torchviz

data_type=[torch.BLS12_377_Fr_G1_Base,torch.BLS12_381_Fr_G1_Base]

class CustomTestCase(unittest.TestCase):

    def assertCustomEqual(self, first, second, msg=None):
        if(torch.equal_mod(first,second)) :
            return True
        else:
            return False
        # self.assertEqual(first, second, msg=msg)

    # 在测试方法中使用新的自定义断言方法
    def test_custom_data_equality(self):
        custom_data_1 =y1
        custom_data_2 =y2

        # 使用自定义断言方法进行比较
        self.assertCustomEqual(custom_data_1, custom_data_2, "自定义数据应该相等")
    
    def test_custom_data_type(self):
        custom_data_1=y1
        test_to_base_value=F.to_base(y1)
        self.assertEqual(test_to_base_value.dtype, torch.BLS12_377_Fr_G1_Base)

    def test_tensor_dtype(self):
        def my_function(in_a):
            try:
                torch.to_mod(in_a)
                return True
            except Exception as e:
                print(f"An error occurred: {e}")
                return False
        
        for type_ele in data_type:
            input = torch.tensor([[1, 2, 3, 2], [5, 6, 7, 8],[1,2,3,4]], dtype=type_ele)
            result =my_function(input)
            self.assertTrue(result)


if __name__ == '__main__':
    suite = unittest.TestSuite()
    suite.addTests(unittest.TestLoader().loadTestsFromTestCase(CustomTestCase))

    # with open('HTMLReport.html', 'w') as f:
    #     runner = HTMLTestRunner(stream=f,
    #                             title='MathFunc Test Report',
    #                             description='generated by HTMLTestRunner.',
    #                             verbosity=2
    #                             )
    #     runner.run(suite)

    runner = unittest.TextTestRunner()
    runner.run(suite)
